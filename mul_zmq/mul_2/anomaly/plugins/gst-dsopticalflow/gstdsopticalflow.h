/*******************************************************************************
 * MIT License
 * 
 * Copyright (C) 2019 NVIDIA CORPORATION
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/


#ifndef __GST_DSOPTICALFLOW_H__
#define __GST_DSOPTICALFLOW_H__

#include <gst/base/gstbasetransform.h>
#include <gst/video/video.h>

/* Open CV headers */
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"

#include <cuda.h>
#include <cuda_runtime.h>

#include "nvbuffer.h"
#include "gst-nvquery.h"
#include "gstnvstreammeta.h"
#include "gstnvdsmeta.h"
#include "dsopticalflow_lib/dsopticalflow_lib.h"

/* Package and library details required for plugin_init */
#define PACKAGE "dsopticalflow"
#define VERSION "1.0"
#define LICENSE "Proprietary"
#define DESCRIPTION "NVIDIA opticalflow plugin for integration with DeepStream on DGPU"
#define BINARY_PACKAGE "NVIDIA DeepStream 3rdparty IP integration opticalflow plugin"
#define URL "http://nvidia.com/"


G_BEGIN_DECLS
/* Standard boilerplate stuff */
typedef struct _GstDsOpticalFlow GstDsOpticalFlow;
typedef struct _GstDsOpticalFlowClass GstDsOpticalFlowClass;

/* Standard boilerplate stuff */
#define GST_TYPE_DS_OPTICAL_FLOW (gst_ds_optical_flow_get_type())
#define GST_DS_OPTICAL_FLOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_DS_OPTICAL_FLOW,GstDsOpticalFlow))
#define GST_DS_OPTICAL_FLOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_DS_OPTICAL_FLOW,GstDsOpticalFlowClass))
#define GST_DS_OPTICAL_FLOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DS_OPTICAL_FLOW, GstDsOpticalFlowClass))
#define GST_IS_DS_OPTICAL_FLOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_DS_OPTICAL_FLOW))
#define GST_IS_DS_OPTICAL_FLOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_DS_OPTICAL_FLOW))
#define GST_DS_OPTICAL_FLOW_CAST(obj)  ((GstDsOpticalFlow *)(obj))

struct _GstDsOpticalFlow
{
  GstBaseTransform base_trans;

  // Context of the custom algorithm library
  DsOpticalFlowCtx *dsopticalflowlib_ctx;

  // Unique ID of the element. The labels generated by the element will be
  // updated at index `unique_id` of attr_info array in NvDsObjectParams.
  guint unique_id;

  // Frame number of the current input buffer
  guint64 frame_num;

  // Input video info (resolution, color format, framerate, etc)
  GstVideoInfo video_info;

  // Resolution at which frames/objects should be processed
  gint processing_width;
  gint processing_height;

  // GPU ID on which we expect to execute the task
  guint gpu_id;

  // Buffer pool size used for optical flow output
  gint pool_size;

  // enable optical flow heat map calculation
  gboolean enable_heatmap;
};

// Boiler plate stuff
struct _GstDsOpticalFlowClass
{
  GstBaseTransformClass parent_class;
};

GType gst_ds_optical_flow_get_type (void);

G_END_DECLS
#endif /* __GST_DSOPTICALFLOW_H__ */
